{"ast":null,"code":"var _jsxFileName = \"/home/worm/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      let boardCopy = oldBoard.map(row => [...row]);\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n      return boardCopy;\n    });\n  }\n\n  // TODO: in the copy, flip this cell and the cells around it\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"You won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 16\n    }, this);\n  }\n  // TODO: return the copy\n  let tblBoard = [];\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push( /*#__PURE__*/_jsxDEV(Cell, {\n        isLit: board[y][x],\n        flipCellsAroundMe: () => flipCellsAround(coord)\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this));\n    }\n    tblBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, y, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 23\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: tblBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n\n// if the game is won, just show a winning msg & render nothing else\n\n// TODO\n\n// make table board\n\n// TODO\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","hasWon","every","row","cell","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","children","fileName","_jsxFileName","lineNumber","columnNumber","tblBoard","push","isLit","flipCellsAroundMe","className","_c","$RefreshReg$"],"sources":["/home/worm/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n        // TODO: Make a (deep) copy of the oldBoard\n        let boardCopy = oldBoard.map(row => [...row]);\n        flipCell(y, x, boardCopy);\n        flipCell(y, x - 1, boardCopy);\n        flipCell(y, x + 1, boardCopy);\n        flipCell(y - 1, x, boardCopy);\n        flipCell(y + 1, x, boardCopy);\n\n        return boardCopy;\n\n      });\n    }\n\n      \n      // TODO: in the copy, flip this cell and the cells around it\n      if (hasWon()) {\n        return <div>You won!</div>;\n      }\n      // TODO: return the copy\n      let tblBoard = [];\n\n      for (let y = 0; y < nrows; y++) {\n        let row = [];\n        for (let x = 0; x < ncols; x++) {\n          let coord = `${y}-${x}`;\n          row.push(\n            <Cell\n              key={coord}\n              isLit={board[y][x]}\n              flipCellsAroundMe={() => flipCellsAround(coord)}\n            />\n          );\n        }\n        tblBoard.push(<tr key={y}>{row}</tr>);\n      }\n      return (\n        <table className=\"Board\">\n          <tbody>{tblBoard}</tbody>\n        </table>\n      );\n    }\n    \n\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}